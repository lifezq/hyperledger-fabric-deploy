#!/bin/bash
#
# Generate config
#
# @Author Ryan
# @Link   github.com/lifezq
# @Datetime 2019-09-04
#

export PATH=${PWD}/bin:${PWD}/docker:${PWD}:$PATH

CA_SERVER=""
CA_ACCOUNT=""
CA_PASSWORD=""
shiftcc=0
while getopts "h?a:u:" opt; do
  case "$opt" in
  h | \?)
    echo "Usage: "
    echo "  generate-config.sh [options] <orderer_number> <org_number>"
    echo "Options:"
    echo "    -a <ca-server|host:port> specify an ca-server address, indicates whether a ca certificate is used"
    echo "    -u <ca-account|user:password> account for ca-server"
    echo "Other:"
    echo "    - <orderer_number> default 1"
    echo "    - <org_number> default 1"
    exit 0
    ;;
  a)
    CA_SERVER=$OPTARG
    let  shiftcc+=2
    ;;
  u)
    
    OPT="$OPTARG"
    OPT=("${OPT//:/ }")
    i=0

    for o in $OPT;
    do
        if [ $i -eq 0 ];then
            CA_ACCOUNT=$o
        elif [ $i -eq 1 ];then
            CA_PASSWORD=$o
        else
            echo "invalid account"
            exit 1
        fi
    let i+=1
    done
    let  shiftcc+=2
    ;;
  esac
done

shift $shiftcc

# Ask user for confirmation to proceed
function askProceed() {
    echo "This script will guide you through the generation of the fabric organization network configuration"
  read -p "Continue? [Y/n] " ans
  case "$ans" in
  y | Y)
    echo "proceeding ..."
    ;;
  n | N)
    echo "exiting..."
    exit 1
    ;;
  *)
    echo "invalid response"
    askProceed
    ;;
  esac
}

askProceed

CONFIGTX_OUT_FILE="configtx.yaml"
CRYPTO_OUT_FILE="crypto-config.yaml"
BASE_PEER_OUT_FILE="base/docker-compose-peer.yaml"
ORDERER_BASE_OUT_FILE="base/orderer-base.yaml"
PEER_OUT_FILE="docker-compose-peer.yaml"
COUCH_OUT_FILE="docker-compose-couch.yaml"
ORDERER_OUT_FILE="docker-compose-orderer.yaml"
KAFKA_OUT_FILE="docker-compose-kafka.yaml"
CLI_OUT_FILE="docker-compose-cli.yaml"
GENERATE_LOCK_FILE="generate.lock"

if [ $1"x" == "clearx" -o $1"x" == "cleanx" ];then
    rm -rf crypto-config channel-artifacts/*
    rm -f $CONFIGTX_OUT_FILE $CRYPTO_OUT_FILE $BASE_PEER_OUT_FILE \
          $ORDERER_BASE_OUT_FILE $PEER_OUT_FILE $COUCH_OUT_FILE $GENERATE_LOCK_FILE
    echo "cleaned generate files"
    exit 0
fi

CUR_DIR=`pwd`
ORDERER_NUMBER=$1
KAFKA_NUMBER=$ORDERER_NUMBER
ORG_NUMBER=$2
: ${ORDERER_NUMBER:="1"}
: ${KAFKA_NUMBER:="$ORDERER_NUMBER"}
: ${ORG_NUMBER:="1"}

# system channel name defaults to "test-sys-channel"
SYS_CHANNEL="test-sys-channel"
# channel name defaults to "mychannel"
CHANNEL_NAME="mychannel"
# default consensus type
CONSENSUS_TYPE="kafka"
# default if couchdb
IF_COUCHDB="couchdb"

source .env

if [ $PER_ORG_NODE_COUNT -gt 10 ];then
    echo "Per org node count must less than 10"
    exit 1
fi


which configtxgen 2>/dev/null
res0=$?
which cryptogen 2>/dev/null
res1=$?
which fabric-ca-client 2>/dev/null
res2=$?
if [ "$res0" -ne 0 -o "$res1" -ne 0 -o "$res2" -ne 0 ]; then
  tar -zxvf bin.tar.gz
fi

cp bin/configtxgen-$IMAGETAG bin/configtxgen >&/dev/null
cp bin/cryptogen-$IMAGETAG bin/cryptogen >&/dev/null

CC=(${DOMAIN_NAME//./ })
NAME_DOMAIN="${CC[1]}.${CC[0]}"

# ---------------------------------------------------------------------------
# "configtx.yaml" - generate
# ---------------------------------------------------------------------------

ORGANIZATIONS_TEMPLATE="
# This file is automatically generated by the script. Do not change it!
#
#

---
################################################################################
#
#   Section: Organizations
#
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
#
################################################################################
Organizations:

    # SampleOrg defines an MSP using the sampleconfig.  It should never be used
    # in production but may be used as a template for other definitions
    - &OrdererOrg
        # DefaultOrg defines the organization which is used in the sampleconfig
        # of the fabric.git development environment
        Name: OrdererOrg

        # ID to load the MSP definition as
        ID: OrdererMSP

        # MSPDir is the filesystem path which contains the MSP configuration
        MSPDir: crypto-config/ordererOrganizations/${DOMAIN_NAME}/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies:
            Readers:
                Type: Signature
                Rule: \"OR('OrdererMSP.member')\"
            Writers:
                Type: Signature
                Rule: \"OR('OrdererMSP.member')\"
            Admins:
                Type: Signature
                Rule: \"OR('OrdererMSP.admin')\"
"

ORGS_TEMPLATE="
    - &Org1
        # DefaultOrg defines the organization which is used in the sampleconfig
        # of the fabric.git development environment
        Name: Org1MSP

        # ID to load the MSP definition as
        ID: Org1MSP

        MSPDir: crypto-config/peerOrganizations/org1.${DOMAIN_NAME}/msp

        # Policies defines the set of policies at this level of the config tree
        # For organization policies, their canonical path is usually
        #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
        Policies:
            Readers:
                Type: Signature
                Rule: \"OR('Org1MSP.admin', 'Org1MSP.peer', 'Org1MSP.client')\"
            Writers:
                Type: Signature
                Rule: \"OR('Org1MSP.admin', 'Org1MSP.client')\"
            Admins:
                Type: Signature
                Rule: \"OR('Org1MSP.admin')\"

        # leave this flag set to true.
        AnchorPeers:
            # AnchorPeers defines the location of peers which can be used
            # for cross org gossip communication.  Note, this value is only
            # encoded in the genesis block in the Application section context
            - Host: peer0.org1.${DOMAIN_NAME}
              Port: 7051
"

CAPBILITIES_NAME="Channel"
CAPBILITIES_VERSION="1_4_2"
APPLICATION_VERSION="1_4_2"
if [ $IMAGETAG == "1.2.1" ];then
  CAPBILITIES_NAME="Global"
  CAPBILITIES_VERSION="1_1"
  APPLICATION_VERSION="1_2"
fi

CAPABILITIES_TEMPLATE_1="
################################################################################
#
#   SECTION: Capabilities
#
#   - This section defines the capabilities of fabric network. This is a new
#   concept as of v1.1.0 and should not be utilized in mixed networks with
#   v1.0.x peers and orderers.  Capabilities define features which must be
#   present in a fabric binary for that binary to safely participate in the
#   fabric network.  For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those
#   transactions.  This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.  For v1.0.x if any
#   capabilities are defined (including a map with all capabilities turned off)
#   then the v1.0.x peer will deliberately crash.
#
################################################################################
Capabilities:
    # Channel capabilities apply to both the orderers and the peers and must be
    # supported by both.
    # Set the value of the capability to true to require it.
    $CAPBILITIES_NAME: &ChannelCapabilities
        # V1.4.2 for Channel is a catchall flag for behavior which has been
        # determined to be desired for all orderers and peers running at the v1.4.2
        # level, but which would be incompatible with orderers and peers from
        # prior releases.
        # Prior to enabling V1.4.2 channel capabilities, ensure that all
        # orderers and peers on a channel are at v1.4.2 or later.
        V$CAPBILITIES_VERSION: true

    # Orderer capabilities apply only to the orderers, and may be safely
    # used with prior release peers.
    # Set the value of the capability to true to require it.
    Orderer: &OrdererCapabilities
        # V1.4.2 for Orderer is a catchall flag for behavior which has been
        # determined to be desired for all orderers running at the v1.4.2
        # level, but which would be incompatible with orderers from prior releases.
        # Prior to enabling V1.4.2 orderer capabilities, ensure that all
        # orderers on a channel are at v1.4.2 or later.
        V$CAPBILITIES_VERSION: true

    # Application capabilities apply only to the peer network, and may be safely
    # used with prior release orderers.
    # Set the value of the capability to true to require it.
    Application: &ApplicationCapabilities
        # V1.4.2 for Application enables the new non-backwards compatible
        # features and fixes of fabric v1.4.2.
        V$APPLICATION_VERSION: true

################################################################################
#
#   SECTION: Application
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
#
################################################################################
Application: &ApplicationDefaults

    # Organizations is the list of orgs which are defined as participants on
    # the application side of the network
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: \"ANY Readers\"
        Writers:
            Type: ImplicitMeta
            Rule: \"ANY Writers\"
        Admins:
            Type: ImplicitMeta
            Rule: \"MAJORITY Admins\"

    Capabilities:
        <<: *ApplicationCapabilities
################################################################################
#
#   SECTION: Orderer
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
#
################################################################################
Orderer: &OrdererDefaults

    # Orderer Type: The orderer implementation to start
    # Available types are \"solo\" and \"kafka\"
    OrdererType: kafka

    Addresses:"

CAPABILITIES_TEMPLATE_2="
    # Batch Timeout: The amount of time to wait before creating a batch
    BatchTimeout: 2s

    # Batch Size: Controls the number of messages batched into a block
    BatchSize:

        # Max Message Count: The maximum number of messages to permit in a batch
        MaxMessageCount: 10

        # Absolute Max Bytes: The absolute maximum number of bytes allowed for
        # the serialized messages in a batch.
        AbsoluteMaxBytes: 99 MB

        # Preferred Max Bytes: The preferred maximum number of bytes allowed for
        # the serialized messages in a batch. A message larger than the preferred
        # max bytes will result in a batch larger than preferred max bytes.
        PreferredMaxBytes: 512 KB

    Kafka:
        # Brokers: A list of Kafka brokers to which the orderer connects
        # NOTE: Use IP:port notation
        Brokers:"

ORDERER_CAPABILITIES=""
if [ "$IMAGETAG" == "1.2.1" ];then
ORDERER_CAPABILITIES="
    Capabilities:
        <<: *OrdererCapabilities
"
fi

CAPABILITIES_TEMPLATE_3="
    # Organizations is the list of orgs which are defined as participants on
    # the orderer side of the network
    Organizations:

    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: \"ANY Readers\"
        Writers:
            Type: ImplicitMeta
            Rule: \"ANY Writers\"
        Admins:
            Type: ImplicitMeta
            Rule: \"MAJORITY Admins\"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: \"ANY Writers\"
$ORDERER_CAPABILITIES

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
    # Policies defines the set of policies at this level of the config tree
    # For Channel policies, their canonical path is
    #   /Channel/<PolicyName>
    Policies:
        # Who may invoke the 'Deliver' API
        Readers:
            Type: ImplicitMeta
            Rule: \"ANY Readers\"
        # Who may invoke the 'Broadcast' API
        Writers:
            Type: ImplicitMeta
            Rule: \"ANY Writers\"
        # By default, who may modify elements at this config level
        Admins:
            Type: ImplicitMeta
            Rule: \"MAJORITY Admins\"

    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description
    Capabilities:
        <<: *ChannelCapabilities
"

PROFILES_TEMPLATE="
################################################################################
#
#   Profile
#
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
#
################################################################################
Profiles:

    CustomOrgsOrdererGenesis:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Consortiums:
            SampleConsortium:
                Organizations:"

ORGS_PTR_TEMPLATE="                    - *Org1
"
ORDERER_CONSENTERS_TEMPLATE="                - Host: orderer1.${DOMAIN_NAME}
                  Port: 7050
                  ClientTLSCert: crypto-config/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer1.${DOMAIN_NAME}/tls/server.crt
                  ServerTLSCert: crypto-config/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer1.${DOMAIN_NAME}/tls/server.crt
"


ORDERER_COMPLETE=""
ORGS_COMPLETE=""
ORDERER_PORT=8001
ORG_PORT=7051
ORGS_PTR=""
ORDERER_ADDRESS="                - orderer1.${DOMAIN_NAME}:7050
"
ORDERER_TYPE_ADDRESS="        - orderer1.${DOMAIN_NAME}:7050
"
ORDERER_ADDRESSES=""
ORDERER_TYPE_ADDRESSES=""
ORDERER_KAFKA_BROKERS=""
KAFKA_ZOOKEEPER_CONNECT=""
ZOO_SERVERS=""
KAFKA_PORT=8061
KAFKA_BROKER_HOST="            - kafka1.${DOMAIN_NAME}:9092
"
KAFKA_BROKER_HOSTS=""
KAFKA_BROKER_MODE_HOST="                - kafka1.${DOMAIN_NAME}:9092
"
KAFKA_BROKER_MODE_HOSTS=""
KAFKA_BROKER_HOST_COMPLATE=""
KAFKA_BROKER_MODE_HOST_COMPLATE=""

CRYPTO_ORDERER_SPECS="      - Hostname: orderer1
"
CRYPTO_ORDERER_SPECSES=""


for((i=1;i<=$ORDERER_NUMBER;i++));
do

    ORDERER_STORAGE=${ORDERER_CONSENTERS_TEMPLATE//orderer1/orderer$i}
    # ORDERER_STORAGE=${ORDERER_STORAGE/8001/$ORDERER_PORT}
    ORDERER_COMPLETE+="$ORDERER_STORAGE"
    ORDERER_STORAGE=${ORDERER_ADDRESS/orderer1/orderer$i}
    # ORDERER_STORAGE=${ORDERER_STORAGE/8001/$ORDERER_PORT}
    ORDERER_ADDRESSES+=$ORDERER_STORAGE
    ORDERER_STORAGE=${ORDERER_TYPE_ADDRESS/orderer1/orderer$i}
    # ORDERER_STORAGE=${ORDERER_STORAGE/8001/$ORDERER_PORT}
    ORDERER_TYPE_ADDRESSES+=$ORDERER_STORAGE

    ORDERER_SPECS_STORAGE=${CRYPTO_ORDERER_SPECS/orderer1/orderer$i}
    CRYPTO_ORDERER_SPECSES+=$ORDERER_SPECS_STORAGE
    let ORDERER_PORT+=1
done

for((i=1;i<=$KAFKA_NUMBER;i++));
do

    KAFKA_STORAGE=${KAFKA_BROKER_HOST//kafka1/kafka$i}
    # KAFKA_STORAGE=${KAFKA_STORAGE/8061/$KAFKA_PORT}
    KAFKA_BROKER_HOST_COMPLATE+="$KAFKA_STORAGE"
    KAFKA_STORAGE=${KAFKA_BROKER_MODE_HOST//kafka1/kafka$i}
    # KAFKA_STORAGE=${KAFKA_STORAGE/8061/$KAFKA_PORT}
    KAFKA_BROKER_MODE_HOST_COMPLATE+="$KAFKA_STORAGE"
    ORDERER_KAFKA_BROKERS+="kafka$i.${DOMAIN_NAME}:9092,"
    let KAFKA_PORT+=1
done

echo -e "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

services:
  orderer-base:
    image: hyperledger/fabric-orderer:\$IMAGE_TAG
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_KAFKA_RETRY_LONGINTERVAL=10s
      - ORDERER_KAFKA_RETRY_LONGTOTAL=100s
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_BROKERS=["${ORDERER_KAFKA_BROKERS%,}"]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer" >$ORDERER_BASE_OUT_FILE

for((i=1;i<=$ORG_NUMBER;i++));
do

    ORG_STORAGE=${ORGS_TEMPLATE//Org1/Org$i}
    ORG_STORAGE=${ORG_STORAGE//org1/org$i}
    # ORG_STORAGE=${ORG_STORAGE/8151/$ORG_PORT}
    ORGS_COMPLETE+="$ORG_STORAGE"
    ORGS_PTR+=${ORGS_PTR_TEMPLATE/Org1/Org$i}

    let ORG_PORT+=10
done


echo -e "$ORGANIZATIONS_TEMPLATE" >$CONFIGTX_OUT_FILE
echo -e "$ORGS_COMPLETE" >>$CONFIGTX_OUT_FILE
echo -e "$CAPABILITIES_TEMPLATE_1" >>$CONFIGTX_OUT_FILE
echo -e "$ORDERER_TYPE_ADDRESSES" >>$CONFIGTX_OUT_FILE
echo -e "$CAPABILITIES_TEMPLATE_2" >>$CONFIGTX_OUT_FILE
echo -e "$KAFKA_BROKER_HOST_COMPLATE" >>$CONFIGTX_OUT_FILE
echo -e "$CAPABILITIES_TEMPLATE_3" >>$CONFIGTX_OUT_FILE
echo -e "$PROFILES_TEMPLATE" >>$CONFIGTX_OUT_FILE
echo -e "$ORGS_PTR" >>$CONFIGTX_OUT_FILE
echo -e "
    CustomOrgsChannel:
        Consortium: SampleConsortium
        <<: *ChannelDefaults
        Application:
            <<: *ApplicationDefaults
            Organizations:" >>$CONFIGTX_OUT_FILE
echo -e "$ORGS_PTR" >>$CONFIGTX_OUT_FILE
echo -e "
            Capabilities:
                <<: *ApplicationCapabilities" >>$CONFIGTX_OUT_FILE
echo -e "
    SampleDevModeKafka:
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: kafka
            Kafka:
                Brokers:" >>$CONFIGTX_OUT_FILE        
echo -e "$KAFKA_BROKER_MODE_HOST_COMPLATE" >>$CONFIGTX_OUT_FILE
echo "
            Organizations:
            - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Application:
            <<: *ApplicationDefaults
            Organizations:
            - <<: *OrdererOrg
        Consortiums:
            SampleConsortium:
                Organizations:" >>$CONFIGTX_OUT_FILE
echo -e "$ORGS_PTR" >>$CONFIGTX_OUT_FILE

if [ "$IMAGETAG" == "1.4.2" ];then
echo -e "
    SampleMultiNodeEtcdRaft:
        <<: *ChannelDefaults
        Capabilities:
            <<: *ChannelCapabilities
        Orderer:
            <<: *OrdererDefaults
            OrdererType: etcdraft
            EtcdRaft:
                Consenters:" >>$CONFIGTX_OUT_FILE
echo -e "$ORDERER_COMPLETE" >>$CONFIGTX_OUT_FILE
echo "            Addresses:" >>$CONFIGTX_OUT_FILE
echo -e "$ORDERER_ADDRESSES" >>$CONFIGTX_OUT_FILE
echo "
            Organizations:
            - *OrdererOrg
            Capabilities:
                <<: *OrdererCapabilities
        Application:
            <<: *ApplicationDefaults
            Organizations:
            - <<: *OrdererOrg
        Consortiums:
            SampleConsortium:
                Organizations:" >>$CONFIGTX_OUT_FILE
echo -e "$ORGS_PTR" >>$CONFIGTX_OUT_FILE       
fi

# ---------------------------------------------------------------------------
# "crypto-config.yaml" - generate
# ---------------------------------------------------------------------------

ORDERER_ORGS_TEMPLATE="
# This file is automatically generated by the script. Do not change it!
#
#

# ---------------------------------------------------------------------------
# "OrdererOrgs" - Definition of organizations managing orderer nodes
# ---------------------------------------------------------------------------
OrdererOrgs:
  # ---------------------------------------------------------------------------
  # Orderer
  # ---------------------------------------------------------------------------
  - Name: Orderer
    Domain: ${DOMAIN_NAME}
    # ---------------------------------------------------------------------------
    # \"Specs\" - See PeerOrgs below for complete description
    # ---------------------------------------------------------------------------
    Specs:"

echo -e "$ORDERER_ORGS_TEMPLATE" >$CRYPTO_OUT_FILE
echo -e "$CRYPTO_ORDERER_SPECSES" >>$CRYPTO_OUT_FILE
echo -e "
# ---------------------------------------------------------------------------
# \"PeerOrgs\" - Definition of organizations managing peer nodes
# ---------------------------------------------------------------------------
PeerOrgs:
  # ---------------------------------------------------------------------------
  # Org1
  # ---------------------------------------------------------------------------
  - Name: Org1
    Domain: org1.${DOMAIN_NAME}
    EnableNodeOUs: true
    # ---------------------------------------------------------------------------
    # \"Specs\"
    # ---------------------------------------------------------------------------
    # Uncomment this section to enable the explicit definition of hosts in your
    # configuration.  Most users will want to use Template, below
    #
    # Specs is an array of Spec entries.  Each Spec entry consists of two fields:
    #   - Hostname:   (Required) The desired hostname, sans the domain.
    #   - CommonName: (Optional) Specifies the template or explicit override for
    #                 the CN.  By default, this is the template:
    #
    #                              \"{{.Hostname}}.{{.Domain}}\"
    #
    #                 which obtains its values from the Spec.Hostname and
    #                 Org.Domain, respectively.
    # ---------------------------------------------------------------------------
    # Specs:
    #   - Hostname: foo # implicitly \"foo.org1.${DOMAIN_NAME}\"
    #     CommonName: foo27.org5.${DOMAIN_NAME} # overrides Hostname-based FQDN set above
    #   - Hostname: bar
    #   - Hostname: baz
    # ---------------------------------------------------------------------------
    # \"Template\"
    # ---------------------------------------------------------------------------
    # Allows for the definition of 1 or more hosts that are created sequentially
    # from a template. By default, this looks like \"peer%d\" from 0 to Count-1.
    # You may override the number of nodes (Count), the starting index (Start)
    # or the template used to construct the name (Hostname).
    #
    # Note: Template and Specs are not mutually exclusive.  You may define both
    # sections and the aggregate nodes will be created for you.  Take care with
    # name collisions
    # ---------------------------------------------------------------------------
    Template:
      Count: "$PER_ORG_NODE_COUNT"
      # Start: 5
      # Hostname: {{.Prefix}}{{.Index}} # default
    # ---------------------------------------------------------------------------
    # \"Users\"
    # ---------------------------------------------------------------------------
    # Count: The number of user accounts _in addition_ to Admin
    # ---------------------------------------------------------------------------
    Users:
      Count: 1
  # ---------------------------------------------------------------------------
  # Org2: See \"Org1\" for full specification
  # ---------------------------------------------------------------------------" >>$CRYPTO_OUT_FILE
  ORG_SPEC_TEMPLATE="
  - Name: Org1
    Domain: org1.${DOMAIN_NAME}
    EnableNodeOUs: true
    Template:
      Count: 2
    Users:
      Count: 1"
ORG_SPEC_COMPLETE=""
for((i=2;i<=$ORG_NUMBER;i++));
do
    ORG_STORAGE=${ORG_SPEC_TEMPLATE//Org1/Org$i}
    ORG_STORAGE=${ORG_STORAGE//org1/org$i}
    ORG_STORAGE=${ORG_STORAGE/Count: 2/Count: $PER_ORG_NODE_COUNT}
    ORG_SPEC_COMPLETE+="$ORG_STORAGE"
done
echo -e "$ORG_SPEC_COMPLETE" >>$CRYPTO_OUT_FILE


# ---------------------------------------------------------------------------
# "base/docker-compose-peer.yaml" - generate
# ---------------------------------------------------------------------------

echo "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

services:" >$BASE_PEER_OUT_FILE
PEER_TEMPLATE="
  peer0.org1.${DOMAIN_NAME}:
    container_name: peer0.org1.${DOMAIN_NAME}
    extends:
      file: peer-base.yaml
      service: peer-base
    environment:
      - CORE_PEER_ID=peer0.org1.${DOMAIN_NAME}
      - CORE_PEER_ADDRESS=peer0.org1.${DOMAIN_NAME}:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.${DOMAIN_NAME}:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.${DOMAIN_NAME}:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.${DOMAIN_NAME}:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/:/host/var/run/
        - ../crypto-config/peerOrganizations/org1.${DOMAIN_NAME}/peers/peer0.org1.${DOMAIN_NAME}/msp:/etc/hyperledger/fabric/msp
        - ../crypto-config/peerOrganizations/org1.${DOMAIN_NAME}/peers/peer0.org1.${DOMAIN_NAME}/tls:/etc/hyperledger/fabric/tls
        - ../chaincode/peer/peer0.org1.${DOMAIN_NAME}:/var/hyperledger/production
    ports:
      - 7051:7051
      - 7253:7053"

PEER_PORT=7051
PEER_EVENT_PORT=7253
PEER_CHAINPORT=7152
PEER_COMPLATE=""
PEER_VOLUME_HOST="
  peer0.org1.${DOMAIN_NAME}:"
PEER_VOLUME_COMPLATE=""
PEER_SERVICE_TEMPLATE="
  peer0.org1.${DOMAIN_NAME}:
    container_name: peer0.org1.${DOMAIN_NAME}
    extends:
      file:  base/docker-compose-peer.yaml
      service: peer0.org1.${DOMAIN_NAME}
    networks:
      - ${COMPOSE_NETWORK_NAME}"
PEER_SERVICE_COMPLATE=""
COUCH_PORT=8984
COUCH_VOLUME_HOST="
  couchdb0:"
COUCH_VOLUME_COMPLATE=""
COUCH_SERVICE_TEMPLATE="
  couchdb0:
    container_name: couchdb0
    image: hyperledger/fabric-couchdb:$IMAGE_TAG_KAFKA
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an \"Admin Party\" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - \"8984:5984\"
    networks:
      - ${COMPOSE_NETWORK_NAME}

  peer0.org1.${DOMAIN_NAME}:
    environment:
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    depends_on:
      - couchdb0
"
COUCH_SERVICE_COMPLATE=""
for((i=0;i<$PER_ORG_NODE_COUNT;i++));
do
    PEER_STORAGE=${PEER_TEMPLATE//peer0\.org1/peer$i\.org1}
    PEER_STORAGE=${PEER_STORAGE//7052/$PEER_CHAINPORT}
    PEER_STORAGE=${PEER_STORAGE//7051/$PEER_PORT}
    PEER_STORAGE=${PEER_STORAGE//7253/$PEER_EVENT_PORT}
    PEER_COMPLATE+="$PEER_STORAGE"
    PEER_STORAGE=${PEER_VOLUME_HOST//peer0\.org1/peer$i\.org1}
    PEER_VOLUME_COMPLATE+=$PEER_STORAGE
    PEER_STORAGE=${PEER_SERVICE_TEMPLATE//peer0\.org1/peer$i\.org1}
    PEER_SERVICE_COMPLATE+=$PEER_STORAGE
    COUCH_STORAGE=${COUCH_VOLUME_HOST//couchdb0/couchdb${i}1}
    COUCH_VOLUME_COMPLATE+=$COUCH_STORAGE
    COUCH_STORAGE=${COUCH_SERVICE_TEMPLATE//peer0\.org1/peer$i\.org1}
    COUCH_STORAGE=${COUCH_STORAGE//couchdb0/couchdb${i}1}
    COUCH_STORAGE=${COUCH_STORAGE/8984:5984/$COUCH_PORT:5984}
    COUCH_SERVICE_COMPLATE+=$COUCH_STORAGE

    let PEER_PORT+=1
    let PEER_EVENT_PORT+=1
    let PEER_CHAINPORT+=1
    let COUCH_PORT+=1
done
echo -e "$PEER_COMPLATE" >>$BASE_PEER_OUT_FILE

# ---------------------------------------------------------------------------
# "docker-compose-peer.yaml" - generate
# ---------------------------------------------------------------------------

echo "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

volumes:" >$PEER_OUT_FILE
echo -e "$PEER_VOLUME_COMPLATE" >>$PEER_OUT_FILE
echo "
networks:
  ${COMPOSE_NETWORK_NAME}:

services:" >>$PEER_OUT_FILE
echo -e "$PEER_SERVICE_COMPLATE" >>$PEER_OUT_FILE


# 
if [ "${IF_COUCHDB}" == "couchdb" ]; then
    echo "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

volumes:" >$COUCH_OUT_FILE
echo -e "$COUCH_VOLUME_COMPLATE" >>$COUCH_OUT_FILE
echo "
networks:
  ${COMPOSE_NETWORK_NAME}:

services:" >>$COUCH_OUT_FILE
    echo -e "$COUCH_SERVICE_COMPLATE" >>$COUCH_OUT_FILE
fi


# ---------------------------------------------------------------------------
# "docker-compose-orderer.yaml" - generate
# ---------------------------------------------------------------------------

echo -e "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

volumes:
  orderer1.${DOMAIN_NAME}:

networks:
  ${COMPOSE_NETWORK_NAME}:

services:
  orderer1.${DOMAIN_NAME}:
    extends:
      file:   base/docker-compose-orderer.yaml
      service: orderer1.${DOMAIN_NAME}
    container_name: orderer1.${DOMAIN_NAME}
    networks:
      - ${COMPOSE_NETWORK_NAME}
    extra_hosts:" >$ORDERER_OUT_FILE

KAFKA_EXTRA_HOST="      - \"kafka1.${DOMAIN_NAME}:127.0.0.1\"
"
ZOOKEEPER_EXTRA_HOST="      - \"zookeeper1.${DOMAIN_NAME}:127.0.0.1\"
"
ORDERER_EXTRA_HOST="      - \"orderer1.${DOMAIN_NAME}:127.0.0.1\"
"
KAFKA_COMPLETE=""
ZOOKEEPER_COMPLETE=""
ORDERER_COMPLETE=""
for((i=1;i<=$KAFKA_NUMBER;i++));
do
    KAFKA_STORAGE=${KAFKA_EXTRA_HOST//kafka1/kafka$i}
    KAFKA_COMPLETE+="$KAFKA_STORAGE"
    ZOOKEEPER_STORAGE=${ZOOKEEPER_EXTRA_HOST//zookeeper1/zookeeper$i}
    ZOOKEEPER_COMPLETE+="$ZOOKEEPER_STORAGE"
done

for((i=1;i<=$ORDERER_NUMBER;i++));
do
    ORDERER_STORAGE=${ORDERER_EXTRA_HOST//orderer1/orderer$i}
    ORDERER_COMPLETE+="$ORDERER_STORAGE"
done
echo -e "$KAFKA_COMPLETE">>$ORDERER_OUT_FILE
echo -e "$ORDERER_COMPLETE">>$ORDERER_OUT_FILE

# ---------------------------------------------------------------------------
# "base/docker-compose-orderer.yaml" - generate
# ---------------------------------------------------------------------------
echo -e "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

services:

  orderer1.${DOMAIN_NAME}:
    container_name: orderer1.${DOMAIN_NAME}
    extends:
      file: orderer-base.yaml
      service: orderer-base
    volumes:
        - ../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../crypto-config/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer1.${DOMAIN_NAME}/msp:/var/hyperledger/orderer/msp
        - ../crypto-config/ordererOrganizations/${DOMAIN_NAME}/orderers/orderer1.${DOMAIN_NAME}/tls/:/var/hyperledger/orderer/tls
        - ../chaincode/orderer/orderer1.${DOMAIN_NAME}:/var/hyperledger
    ports:
      - 8001:7050
      - 7050:7050
">base/docker-compose-orderer.yaml

# ---------------------------------------------------------------------------
# "docker-compose-kafka.yaml" - generate
# ---------------------------------------------------------------------------

echo -e "
# This file is automatically generated by the script. Do not change it!
#
#


# NOTE: This is not the way a Kafka cluster would normally be deployed in production, as it is not secure
# and is not fault tolerant. This example is a toy deployment that is only meant to exercise the Kafka code path
# of the ordering service.

version: '2'

volumes:
  zookeeper1.${DOMAIN_NAME}:
  kafka1.${DOMAIN_NAME}:

networks:
  ${COMPOSE_NETWORK_NAME}:

services:
  zookeeper1.${DOMAIN_NAME}:
    container_name: zookeeper1.${DOMAIN_NAME}
    hostname: zookeeper1.${DOMAIN_NAME}
    image: hyperledger/fabric-zookeeper:$IMAGE_TAG_KAFKA
    restart: always
    environment:
      - ZOO_MY_ID=1
      - ZOOKEEPER_TICK_TIME:2000
      - quorumListenOnAllIPs=true
      - ZOO_SERVERS=server.1=zookeeper1.${DOMAIN_NAME}:2888:3888
    networks:
      - ${COMPOSE_NETWORK_NAME}
    volumes:
      - ./chaincode/zookeeper/zookeeper1:/data/
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    extra_hosts:">$KAFKA_OUT_FILE
echo -e "$ZOOKEEPER_COMPLETE">>$KAFKA_OUT_FILE
echo -e "
  kafka1.${DOMAIN_NAME}:
    container_name: kafka1.${DOMAIN_NAME}
    hostname: kafka1.${DOMAIN_NAME}
    image: hyperledger/fabric-kafka:$IMAGE_TAG_KAFKA
    restart: always
    depends_on:
      - zookeeper1.${DOMAIN_NAME}
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper1.${DOMAIN_NAME}:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka1.${DOMAIN_NAME}:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MIN_INSYNC_REPLICAS=1
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
    networks:
      - ${COMPOSE_NETWORK_NAME}
    volumes:
      - ./chaincode/kafka/kafka1:/tmp/kafka-logs/
    ports:
      - 9092:9092
    extra_hosts:">>$KAFKA_OUT_FILE
echo -e "$ZOOKEEPER_COMPLETE">>$KAFKA_OUT_FILE
echo -e "$KAFKA_COMPLETE">>$KAFKA_OUT_FILE

# ---------------------------------------------------------------------------
# "docker-compose-cli.yaml" - generate
# ---------------------------------------------------------------------------

echo -e "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

volumes:
  cli:

networks:
  ${COMPOSE_NETWORK_NAME}:

services:
  cli:
    container_name: cli
    image: hyperledger/fabric-tools:\$IMAGE_TAG
    tty: true
    stdin_open: true
    environment:
      - SYS_CHANNEL=\$SYS_CHANNEL
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - DOMAIN_NAME=${DOMAIN_NAME}
      - CORE_PEER_ADDRESS=peer0.org1.${DOMAIN_NAME}:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - FABRIC_CFG_PATH=/opt/gopath/src/github.com/hyperledger/fabric/peer
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.${DOMAIN_NAME}/peers/peer0.org1.${DOMAIN_NAME}/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.${DOMAIN_NAME}/peers/peer0.org1.${DOMAIN_NAME}/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.${DOMAIN_NAME}/peers/peer0.org1.${DOMAIN_NAME}/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.${DOMAIN_NAME}/users/Admin@org1.${DOMAIN_NAME}/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./chaincode/:/opt/gopath/src/
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    networks:
      - ${COMPOSE_NETWORK_NAME}
    extra_hosts:
">$CLI_OUT_FILE


# ---------------------------------------------------------------------------
# "config.yaml" - generate
# ---------------------------------------------------------------------------

echo -e "
NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/ca.org1.${DOMAIN_NAME}-cert.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/ca.org1.${DOMAIN_NAME}-cert.pem
    OrganizationalUnitIdentifier: peer">config.yaml



# ---------------------------------------------------------------------------
# "docker-compose-ca.yaml" - generate
# ---------------------------------------------------------------------------

echo -e "
# This file is automatically generated by the script. Do not change it!
#
#

version: '2'

networks:
  ${COMPOSE_NETWORK_NAME}:

services:
  ca_server:
    image: hyperledger/fabric-ca:\$IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-server
      - FABRIC_CA_SERVER_PORT=7054
    ports:
      - \"7054:7054\"
    command: sh -c 'fabric-ca-server start -b admin:123123 --cfg.affiliations.allowremove --cfg.identities.allowremove -d'
    container_name: ca_server
    networks:
      - ${COMPOSE_NETWORK_NAME}">docker-compose-ca.yaml

function cagenerate() {
  
  CA_DIR=$CUR_DIR/cagenerate
  mkdir $CA_DIR
  cd $CA_DIR
  cp $CUR_DIR/config.yaml ./
  mkdir admin
  export FABRIC_CA_CLIENT_HOME=`pwd`/admin

  fabric-ca-client enroll -u http://$CA_ACCOUNT:$CA_PASSWORD@$CA_SERVER
  fabric-ca-client affiliation remove --force  com
  fabric-ca-client affiliation add com 
  fabric-ca-client affiliation add ${NAME_DOMAIN}

  for((i=1;i<=$ORG_NUMBER;i++));
  do
    fabric-ca-client affiliation add ${NAME_DOMAIN}.org$i
  done
  

  fabric-ca-client register --id.name Admin@${DOMAIN_NAME} --id.type client --id.affiliation "${NAME_DOMAIN}" \
  --id.attrs '"hf.Registrar.Roles=client,orderer,peer,user","hf.Registrar.DelegateRoles=client,orderer,peer,user",hf.Registrar.Attributes=*,hf.GenCRL=true,hf.Revoker=true,hf.AffiliationMgr=true,hf.IntermediateCA=true,role=admin:ecert' \
  --id.secret=$CA_PASSWORD

  mkdir -p ${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME} && cd "$_"

  fabric-ca-client enroll -u http://Admin@${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER -M `pwd`/msp
  fabric-ca-client enroll -d --enrollment.profile tls -u http://Admin@${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER -M `pwd`/tls

  mkdir -p msp/{admincerts,tlscacerts}

  mv msp/signcerts/*.pem msp/signcerts/Admin@${DOMAIN_NAME}-cert.pem
  mv msp/cacerts/*.pem msp/cacerts/ca.${DOMAIN_NAME}-cert.pem
  cp msp/signcerts/*.pem msp/admincerts/
  cp tls/tlscacerts/*.pem msp/tlscacerts/tlsca.${DOMAIN_NAME}-cert.pem

  cp tls/tlscacerts/*.pem tls/ca.crt
  cp tls/signcerts/*.pem tls/client.crt
  cp tls/keystore/*_sk tls/client.key

  rm -rf tls/{cacerts,tlscacerts,signcerts,keystore}
  cd $CA_DIR

  mkdir -p ${DOMAIN_NAME}/{ca,tlsca}
  mkdir -p ${DOMAIN_NAME}/msp/{admincerts,cacerts,tlscacerts}
  cp ${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/admincerts/*.pem ${DOMAIN_NAME}/msp/admincerts/
  cp ${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/cacerts/*.pem ${DOMAIN_NAME}/msp/cacerts/
  cp ${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/tlscacerts/*.pem ${DOMAIN_NAME}/msp/tlscacerts/
  cp ${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/cacerts/*.pem ${DOMAIN_NAME}/ca/
  cp ${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/tlscacerts/*.pem ${DOMAIN_NAME}/tlsca/


# ORG 

  for((orgid=1;orgid<=$ORG_NUMBER;orgid++));
  do
    cd $CA_DIR

    fabric-ca-client register --id.name Admin@org$orgid.${DOMAIN_NAME} --id.type client --id.affiliation "${NAME_DOMAIN}.org$orgid" \
    --id.attrs '"hf.Registrar.Roles=client,orderer,peer,user","hf.Registrar.DelegateRoles=client,orderer,peer,user",hf.Registrar.Attributes=*,hf.GenCRL=true,hf.Revoker=true,hf.AffiliationMgr=true,hf.IntermediateCA=true,role=admin:ecert' \
    --id.secret=$CA_PASSWORD

    mkdir -p org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME} && cd "$_"

    fabric-ca-client enroll -u http://Admin@org$orgid.${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER -M `pwd`/msp
    fabric-ca-client enroll -d --enrollment.profile tls -u http://Admin@org$orgid.${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER -M `pwd`/tls

    mkdir -p msp/{admincerts,tlscacerts}

    mv msp/signcerts/*.pem msp/signcerts/Admin@org$orgid.${DOMAIN_NAME}-cert.pem
    mv msp/cacerts/*.pem msp/cacerts/ca.org$orgid.${DOMAIN_NAME}-cert.pem
    cp msp/signcerts/*.pem msp/admincerts/
    cp tls/tlscacerts/*.pem msp/tlscacerts/tlsca.org$orgid.${DOMAIN_NAME}-cert.pem

    cp tls/tlscacerts/*.pem tls/ca.crt
    cp tls/signcerts/*.pem tls/client.crt
    cp tls/keystore/*_sk tls/client.key

    rm -rf tls/{cacerts,tlscacerts,signcerts,keystore}

    cd $CA_DIR

    mkdir -p org$orgid.${DOMAIN_NAME}/{ca,tlsca}
    mkdir -p org$orgid.${DOMAIN_NAME}/msp/{admincerts,cacerts,tlscacerts}
    cp org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME}/msp/admincerts/*.pem org$orgid.${DOMAIN_NAME}/msp/admincerts/
    cp org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME}/msp/cacerts/*.pem org$orgid.${DOMAIN_NAME}/msp/cacerts/
    cp org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME}/msp/tlscacerts/*.pem org$orgid.${DOMAIN_NAME}/msp/tlscacerts/
    cp org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME}/msp/cacerts/*.pem org$orgid.${DOMAIN_NAME}/ca/
    cp org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME}/msp/tlscacerts/*.pem org$orgid.${DOMAIN_NAME}/tlsca/

  done


 # orderer
  for((ordererid=1;ordererid<=$ORDERER_NUMBER;ordererid++));
    do
 
    cd $CA_DIR
    fabric-ca-client enroll -u http://Admin@${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER

    fabric-ca-client register --id.name orderer$ordererid.${DOMAIN_NAME} --id.type orderer --id.affiliation "${NAME_DOMAIN}" \
    --id.attrs '"hf.Registrar.Roles=orderer",ecert=true' \
    --id.secret=$CA_PASSWORD

    mkdir -p ${DOMAIN_NAME}/orderers/orderer$ordererid.${DOMAIN_NAME} && cd "$_"

    fabric-ca-client enroll -u http://orderer$ordererid.${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER --csr.cn orderer$ordererid.${DOMAIN_NAME} --csr.hosts orderer$ordererid.${DOMAIN_NAME} -M `pwd`/msp
    fabric-ca-client enroll -d --enrollment.profile tls -u http://orderer$ordererid.${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER --csr.cn orderer$ordererid.${DOMAIN_NAME} --csr.hosts orderer$ordererid.${DOMAIN_NAME} -M `pwd`/tls

    mkdir msp/{admincerts,tlscacerts}


    cp $CA_DIR/${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/admincerts/*.pem msp/admincerts/
    cp $CA_DIR/${DOMAIN_NAME}/users/Admin@${DOMAIN_NAME}/msp/tlscacerts/*.pem msp/tlscacerts/
    mv msp/cacerts/*.pem msp/cacerts/ca.${DOMAIN_NAME}-cert.pem
    mv msp/signcerts/*.pem msp/signcerts/orderer$ordererid.${DOMAIN_NAME}-cert.pem

    cp tls/tlscacerts/*.pem tls/ca.crt
    cp tls/signcerts/*.pem tls/server.crt
    cp tls/keystore/*_sk tls/server.key

    rm -rf tls/{cacerts,tlscacerts,signcerts,keystore}

  done

  cd $CA_DIR

  for((orgid=1;orgid<=$ORG_NUMBER;orgid++));
  do
    for((peerid=0;peerid<$PER_ORG_NODE_COUNT;peerid++));
    do
      cd $CA_DIR
      fabric-ca-client enroll -u http://Admin@${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER

      fabric-ca-client register --id.name peer$peerid.org$orgid.${DOMAIN_NAME} --id.type peer --id.affiliation "${NAME_DOMAIN}.org$orgid" \
      --id.attrs '"hf.Registrar.Roles=peer",ecert=true' \
      --id.secret=$CA_PASSWORD

      mkdir -p org$orgid.${DOMAIN_NAME}/peers/peer$peerid.org$orgid.${DOMAIN_NAME} && cd "$_"

      fabric-ca-client enroll -u http://peer$peerid.org$orgid.${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER --csr.cn peer$peerid.org$orgid.${DOMAIN_NAME} --csr.hosts peer$peerid.org$orgid.${DOMAIN_NAME} -M `pwd`/msp
      fabric-ca-client enroll -d --enrollment.profile tls -u http://peer$peerid.org$orgid.${DOMAIN_NAME}:$CA_PASSWORD@$CA_SERVER --csr.cn peer$peerid.org$orgid.${DOMAIN_NAME} --csr.hosts peer$peerid.org$orgid.${DOMAIN_NAME} -M `pwd`/tls

      mkdir msp/{admincerts,tlscacerts}


      cp $CA_DIR/org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME}/msp/admincerts/*.pem msp/admincerts/
      cp $CA_DIR/org$orgid.${DOMAIN_NAME}/users/Admin@org$orgid.${DOMAIN_NAME}/msp/tlscacerts/*.pem msp/tlscacerts/
      mv msp/cacerts/*.pem msp/cacerts/ca.org$orgid.${DOMAIN_NAME}-cert.pem
      mv msp/signcerts/*.pem msp/signcerts/peer$peerid.org$orgid.${DOMAIN_NAME}-cert.pem

      cp tls/tlscacerts/*.pem tls/ca.crt
      cp tls/signcerts/*.pem tls/server.crt
      cp tls/keystore/*_sk tls/server.key

      rm -rf tls/{cacerts,tlscacerts,signcerts,keystore}
    done
  done

  cd $CA_DIR
  rm -rf crypto-config
  mkdir -p crypto-config/{ordererOrganizations,peerOrganizations}
  mv ${DOMAIN_NAME} crypto-config/ordererOrganizations/
  for((orgid=1;orgid<=$ORG_NUMBER;orgid++));
  do
    sed -i "s/org[0-9]\{1,10\}/org$orgid/g" ./config.yaml
    cp config.yaml org$orgid.${DOMAIN_NAME}/msp/
    for((peerid=0;peerid<$PER_ORG_NODE_COUNT;peerid++));
    do
    cp config.yaml org$orgid.${DOMAIN_NAME}/peers/peer$peerid.org$orgid.${DOMAIN_NAME}/msp/
    done
    mv org$orgid.${DOMAIN_NAME} crypto-config/peerOrganizations/
  done

  rm -rf $CUR_DIR/crypto-config
  mv crypto-config $CUR_DIR/
  cd $CUR_DIR
  rm -rf $CA_DIR

  echo ""
  echo "Certificate issuance from ca server <$CA_SERVER> is complete!"
  echo ""
}

function lock() {
    echo "ORDERER_NUMBER="$ORDERER_NUMBER >$GENERATE_LOCK_FILE
    echo "KAFKA_NUMBER="$KAFKA_NUMBER >>$GENERATE_LOCK_FILE
    echo "ORG_NUMBER="$ORG_NUMBER >>$GENERATE_LOCK_FILE
    chmod 400 $GENERATE_LOCK_FILE
}

function unlock() {
    rm -rf $GENERATE_LOCK_FILE
}

# Generates Org certs using cryptogen tool
function generateCerts() {
  which cryptogen
  if [ "$?" -ne 0 ]; then
    echo "cryptogen tool not found. exiting"
    exit 1
  fi
  echo
  echo "##########################################################"
  echo "##### Generate certificates using cryptogen tool #########"
  echo "##########################################################"

  if [ -d "crypto-config" ]; then
    rm -rf crypto-config
  fi
  set -x
  cryptogen generate --config=./crypto-config.yaml
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate certificates..."
    exit 1
  fi
  echo
}

# Generate orderer genesis block, channel configuration transaction and
# anchor peer update transactions
function generateChannelArtifacts() {
  which configtxgen
  if [ "$?" -ne 0 ]; then
    echo "configtxgen tool not found. exiting"
    exit 1
  fi

  echo "##########################################################"
  echo "#########  Generating Orderer Genesis block ##############"
  echo "##########################################################"
  # Note: For some unknown reason (at least for now) the block file can't be
  # named orderer.genesis.block or the orderer will fail to launch!
  echo "CONSENSUS_TYPE="$CONSENSUS_TYPE
  mkdir channel-artifacts 2>/dev/null
  set -x
  if [ "$CONSENSUS_TYPE" == "solo" ]; then
    configtxgen -profile CustomOrgsOrdererGenesis -channelID $SYS_CHANNEL -outputBlock ./channel-artifacts/genesis.block
  elif [ "$CONSENSUS_TYPE" == "kafka" ]; then
    configtxgen -profile SampleDevModeKafka -channelID $SYS_CHANNEL -outputBlock ./channel-artifacts/genesis.block
  elif [ "$CONSENSUS_TYPE" == "etcdraft" ]; then
    configtxgen -profile SampleMultiNodeEtcdRaft -channelID $SYS_CHANNEL -outputBlock ./channel-artifacts/genesis.block
  else
    set +x
    echo "unrecognized CONSESUS_TYPE='$CONSENSUS_TYPE'. exiting"
    exit 1
  fi
  res=$?
  set +x
  if [ $res -ne 0 ]; then
    echo "Failed to generate orderer genesis block..."
    exit 1
  fi
}

unlock
rm -rf crypto-config channel-artifacts/*
if [ ! -z $CA_SERVER ];then
  if [ -z $CA_ACCOUNT -o -z $CA_PASSWORD ];then
    echo "invalid ca accounts"
    exit 1
  fi
  cagenerate
else
  generateCerts
fi
generateChannelArtifacts
lock